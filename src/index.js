// import "./pages/index.css";
const popup = document.querySelector(".popup_type_profile");
const buttonEdit = document.querySelector(".profile__edit-button");
const buttonClose = document.querySelector(".popup__close-button");
const buttonAdd = document.querySelector(".profile__add-button");
const buttonCloseForma = document.querySelector(".popup__cls-btn");
const cardsContainer = document.querySelector(".element-container");
const placeClose = document.querySelector(".place__close");
const elementsTemplate = document.querySelector("#template-elements").content;
const place = document.querySelector(".popup_type_picture");
const linkElement = document.querySelector("#forma-link");
const titleElement = document.querySelector("#forma-title");
const popupNewPlace = document.querySelector(".popup-new-place");
const popupCreateBtn = document.querySelector(".popup__place-form");
const popupContainer = document.querySelector(".popup__container");
const popupPlaceContainer = document.querySelector(".popup__place-container");
function submitPlace(evt) {
  evt.preventDefault();
  renderCard(titleElement, linkElement);
  closePopup(popupNewPlace);
}
function openPopup(popup) {
  popup.classList.add("popup_opened");
}
function closePopup(popup) {
  popup.classList.remove("popup_opened");
}
buttonEdit.addEventListener("click", function () {
  openPopup(popup);
});
buttonAdd.addEventListener("click", function () {
  openPopup(popupNewPlace);
});
buttonClose.addEventListener("click", function () {
  closePopup(popup);
});
buttonCloseForma.addEventListener("click", function () {
  closePopup(popupNewPlace);
});
function keyHandler(evt) {
  if (evt.key === "Enter") {
    closePopup(popup);
  }
}
popup.addEventListener("click", function () {
  closePopup(popup);
});
place.addEventListener("click", function () {
  place.classList.remove(`place_active`);
});
popupNewPlace.addEventListener("click", function () {
  closePopup(popupNewPlace);
});
popupContainer.addEventListener("click", function (evt) {
  evt.stopPropagation();
});
popupPlaceContainer.addEventListener("click", function (evt) {
  evt.stopPropagation();
});
function PlaceHandler(evt) {
  if (evt.key === "Enter") {
    place.classList.remove(`place_active`);
    console.log("klskdfcm");
  }
}

placeClose.addEventListener("click", function () {
  place.classList.remove(`place_active`);
});

// –ù–∞—Ö–æ–¥–∏–º —Ñ–æ—Ä–º—É –≤ DOM
const formElement = document.querySelector(".popup__form"); // –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ—Ç–æ–¥–æ–º querySelector()
// –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã –≤ DOM
const nameInput = document.querySelector("#popup-title"); // –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º .querySelector()
const jobInput = document.querySelector("#popup-info"); // –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º .querySelector()
const popupContent = document.querySelector(".popup__content");
const profTitle = document.querySelector(".profile__title");
const profJob = document.querySelector(".profile__subtitle");
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ¬´–æ—Ç–ø—Ä–∞–≤–∫–∏¬ª —Ñ–æ—Ä–º—ã, —Ö–æ—Ç—è –ø–æ–∫–∞
// –æ–Ω–∞ –Ω–∏–∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –Ω–µ –±—É–¥–µ—Ç
function editformSubmitHandler(evt) {
  evt.preventDefault(); // –≠—Ç–∞ —Å—Ç—Ä–æ—á–∫–∞ –æ—Ç–º–µ–Ω—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã.
  // –¢–∞–∫ –º—ã –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–≤–æ—é –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏.
  // –û —Ç–æ–º, –∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞—Ç—å, —Ä–∞—Å—Å–∫–∞–∂–µ–º –ø–æ–∑–∂–µ.

  // –ü–æ–ª—É—á–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª–µ–π jobInput –∏ nameInput –∏–∑ —Å–≤–æ–π—Å—Ç–≤–∞ value
  profTitle.textContent = nameInput.value;
  profJob.textContent = jobInput.value;

  // –í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –∫—É–¥–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—Å—Ç–∞–≤–ª–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π
  closePopup(popup);
  // –í—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é textContent
}
// –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫ —Ñ–æ—Ä–º–µ:
// –æ–Ω –±—É–¥–µ—Ç —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å–æ–±—ã—Ç–∏–µ–º ‚Äúsubmit‚Äù - ¬´–æ—Ç–ø—Ä–∞–≤–∫–∞¬ª
formElement.addEventListener("submit", editformSubmitHandler);
const initialCards = [
  {
    name: "–ê—Ä—Ö—ã–∑",
    link: "https://pictures.s3.yandex.net/frontend-developer/cards-compressed/arkhyz.jpg",
  },
  {
    name: "–ß–µ–ª—è–±–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
    link: "https://pictures.s3.yandex.net/frontend-developer/cards-compressed/chelyabinsk-oblast.jpg",
  },
  {
    name: "–ò–≤–∞–Ω–æ–≤–æ",
    link: "https://pictures.s3.yandex.net/frontend-developer/cards-compressed/ivanovo.jpg",
  },
  {
    name: "–ö–∞–º—á–∞—Ç–∫–∞",
    link: "https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kamchatka.jpg",
  },
  {
    name: "–•–æ–ª–º–æ–≥–æ—Ä—Å–∫–∏–π —Ä–∞–π–æ–Ω",
    link: "https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kholmogorsky-rayon.jpg",
  },
  {
    name: "–ë–∞–π–∫–∞–ª",
    link: "https://pictures.s3.yandex.net/frontend-developer/cards-compressed/baikal.jpg",
  },
];
popupCreateBtn.addEventListener("submit", submitPlace);

function addnewCard(titleValue, imageValue) {
  const cardElement = elementsTemplate
    .querySelector(".element")
    .cloneNode(true);
  cardElement.querySelector(".element__title").textContent = titleValue;

  cardElement.querySelector(".element__image").src = imageValue;
  cardElement.querySelector(".element__image").alt = "image";
  cardElement
    .querySelector(".element__image")
    .addEventListener(`click`, function (evt) {
      place.classList.add("place_active");
      place.querySelector(`.place__image`).src = evt.target.src;

      place.querySelector(".place__text").textContent = titleValue;
    });
  cardElement
    .querySelector(".element__like")
    .addEventListener("click", function (evt) {
      evt.target.classList.toggle("element__like_active");
    });
  cardElement
    .querySelector(".element__trash")
    .addEventListener("click", function () {
      cardElement.remove();
    });

  return cardElement;
}
function renderCard(linkElement, titleElement) {
  cardsContainer.prepend(addnewCard(linkElement.value, titleElement.value));
}
for (let i = 0; i < initialCards.length; i++) {
  cardsContainer.prepend(
    addnewCard(initialCards[i].name, initialCards[i].link)
  );
}

const showInputError = (formElement, popupContent, errorMessage) => {
  const errorElement = formElement.querySelector(`.${popupContent.id}-error`);
  errorElement.textContent = errorMessage;
  console.log("üöÄ ~ showInputError ~ errorElement", errorElement);

  console.log("üöÄ ~ showInputError ~ popupContent.id", popupContent.id);

  errorElement.classList.add("popup-title-error_active");
};

const hideInputError = (formElement, popupContent) => {
  const errorElement = formElement.querySelector(`.${popupContent.id}-error`);
  errorElement.classList.remove("popup-title-error_active");
  errorElement.textContent = "";
};

const checkInputValidity = (formElement, inputElement) => {
  if (!inputElement.validity.valid) {
    showInputError(formElement, inputElement, inputElement.validationMessage);
  } else {
    hideInputError(formElement, inputElement);
  }
};

const setEventListeners = (formElement) => {
  const inputList = Array.from(formElement.querySelectorAll(".popup__content"));

  const buttonElement = formElement.querySelector(".popup__submit-button");

  toggleButtonState(inputList, buttonElement);

  inputList.forEach((popupContent) => {
    popupContent.addEventListener("input", function () {
      checkInputValidity(formElement, popupContent);

      toggleButtonState(inputList, buttonElement);
    });
  });
};

const hasInvalidInput = (inputList) => {
  return inputList.some((popupContent) => {
    return !popupContent.validity.valid;
  });
};

const toggleButtonState = (inputList, buttonElement) => {
  // –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∏–Ω–ø—É—Ç
  if (hasInvalidInput(inputList)) {
    buttonElement.classList.add("popup__submit-button_disabled");
  } else {
    buttonElement.classList.remove("popup__submit-button_disabled");
  }
};

const enableValidation = () => {
  const formList = Array.from(document.querySelectorAll(".popup__form"));

  formList.forEach((formElement) => {
    setEventListeners(formElement);
  });
};
enableValidation();
